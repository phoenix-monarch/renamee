from pyrogram import Client, filters
from pyrogram.enums import MessageMediaType
from pyrogram.errors import FloodWait
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from hachoir.metadata import extractMetadata
from hachoir.parser import createParser
from helper.utils import progress_for_pyrogram, convert, humanbytes
from helper.database import db
from asyncio import sleep
from PIL import Image
import os, time

@Client.on_callback_query(filters.regex('cancel'))
async def cancel(bot,update):
    try:
        await update.message.delete()
    except:
        return

@Client.on_callback_query(filters.regex('rename'))
async def rename(bot,update):
    user_id = update.message.chat.id
    date = update.message.date
    await update.message.delete()
    await update.message.reply_text("__ùôøùöïùöéùöäùöúùöé ùô¥ùöóùöùùöéùöõ ùôΩùöéùö† ùôµùöíùöïùöéùôΩùöäùöñùöé...__",    
        reply_to_message_id=update.message.reply_to_message.id,  
        reply_markup=ForceReply(True))

@Client.on_message(filters.private & filters.reply)
async def refunc(client, message):
    reply_message = message.reply_to_message
    if (reply_message.reply_markup) and isinstance(reply_message.reply_markup, ForceReply):
        new_name = message.text 
        await message.delete() 
        msg = await client.get_messages(message.chat.id, reply_message.id)
        file = msg.reply_to_message
        media = getattr(file, file.media.value)
        if not "." in new_name:
            if "." in media.file_name:
                extn = media.file_name.rsplit('.', 1)[-1]
            else:
                extn = "mkv"
            new_name = new_name + "." + extn
        await reply_message.delete()

        button = [[InlineKeyboardButton("üìÅ D·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ",callback_data = "upload_document")]]
        if file.media in [MessageMediaType.VIDEO, MessageMediaType.DOCUMENT]:
            button.append([InlineKeyboardButton("üé• V…™·¥Ö·¥á·¥è", callback_data = "upload_video")])
        elif file.media == MessageMediaType.AUDIO:
            button.append([InlineKeyboardButton("üéµ A·¥ú·¥Ö…™·¥è", callback_data = "upload_audio")])
        await message.reply(
            text=f"**S·¥á ü·¥á·¥Ñ·¥õ T ú·¥á O·¥ú·¥õ·¥©·¥ú·¥õ F…™ ü·¥á Ty·¥©·¥á**\n**‚Ä¢ F…™ ü·¥á N·¥Ä·¥ç·¥á :-**```{new_name}```",
            reply_to_message_id=file.id,
            reply_markup=InlineKeyboardMarkup(button)
        )

@Client.on_callback_query(filters.regex("upload"))
async def doc(bot, update):    
    new_name = update.message.text
    new_filename = new_name.split(":-")[1]
    file_path = f"downloads/{new_filename}"
    file = update.message.reply_to_message
    ms = await update.message.edit("T Äy…™…¥…¢ T·¥è D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢....")    
    c_time = time.time()
    try:
        path = await bot.download_media(message=file, file_name=file_path, progress=progress_for_pyrogram, progress_args=("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö....", ms, time.time()))                    
    except Exception as e:
        return await ms.edit(str(e))
    splitpath = path.split("/downloads/")
    dow_file_name = splitpath[1]
    old_file_name = f"downloads/{dow_file_name}"
    os.rename(old_file_name, file_path)
    duration = 0
    try:
        metadata = extractMetadata(createParser(file_path))
        if metadata.has("duration"):
            duration = metadata.get('duration').seconds
    except:
        pass
    ph_path = None
    user_id = int(update.message.chat.id) 
    media = getattr(file, file.media.value)
    c_caption = await db.get_caption(update.message.chat.id)
    c_thumb = await db.get_thumbnail(update.message.chat.id)

    if c_caption:
        try:
            caption = c_caption.format(filename=new_filename, filesize=humanbytes(media.file_size), duration=convert(duration))
        except Exception as e:
            return await ms.edit(text=f"Y·¥è·¥ú Ä C·¥Ä·¥©·¥õ…™·¥è…¥ E Ä Ä·¥è Ä Ex·¥Ñ·¥á·¥©·¥õ K·¥áy·¥°·¥è Ä·¥Ö A Ä…¢·¥ú·¥ç·¥á…¥·¥õ ‚óè> ({e})")             
    else:
        caption = f"**{new_filename}**"
 
    if (media.thumbs or c_thumb):
        if c_thumb:
            ph_path = await bot.download_media(c_thumb) 
        else:
            ph_path = await bot.download_media(media.thumbs[0].file_id)
        Image.open(ph_path).convert("RGB").save(ph_path)
        img = Image.open(ph_path)
        img.resize((320, 320))
        img.save(ph_path, "JPEG")

    await ms.edit("T Äy…™…¥…¢ T·¥è U·¥© ü·¥è·¥Ä·¥Ö…™…¥…¢....")
    type = update.data.split("_")[1]
    try:
        if type == "document":
            await bot.send_document(
                update.message.chat.id,
                document=file_path,
                thumb=ph_path, 
                caption=caption, 
                progress=progress_for_pyrogram,
                progress_args=("U·¥© ü·¥è·¥Ö S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö....", ms, time.time()))
        elif type == "video": 
            await bot.send_video(
                update.message.chat.id,
                video=file_path,
                caption=caption,
                thumb=ph_path,
                duration=duration,
	        progress=progress_for_pyrogram,
		progress_args=("U·¥© ü·¥è·¥Ö S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö....", ms, time.time()))
        elif type == "audio": 
            await bot.send_audio(
		update.message.chat.id,
		audio=file_path,
		caption=caption,
		thumb=ph_path,
		duration=duration,
	        progress=progress_for_pyrogram,
	        progress_args=("U·¥© ü·¥è·¥Ö S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö....", ms, time.time()))
    except Exception as e:          
        os.remove(file_path)
        if ph_path:
            os.remove(ph_path)
        return await ms.edit(f" E Ä Ä·¥è Ä {e}")
    await ms.delete() 
    os.remove(file_path) 
    if ph_path: os.remove(ph_path) 
